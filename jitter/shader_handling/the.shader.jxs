<jittershader name="xenorama">
  <description>fundamental texture shader</description>

  <param name="zoom" type="float" default="1.0" />
  <param name="tex0" type="int" default="0" />
  <param name="texRepeat" type="vec2" default="1.0 1.0" />

  <param name="mVPM" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
  <param name="texMat0" type="mat4" state="TEXTURE0_MATRIX" />
  <param name="pos" type="vec3" state="POSITION" />
  <param name="uv" type="vec2" state="TEXCOORD" />

  <language name="glsl" version="1.5" >

    <bind param="zoom" program="fp"/>
    <bind param="tex0" program="fp"/>
    <bind param="texRepeat" program="vp"/>

    <bind param="mVPM" program="vp"/>
    <bind param="texMat0" program="vp"/>
    <bind param="pos" program="vp"/>
    <bind param="uv" program="vp"/>

    <program name="vp" type="vertex" >

    <![CDATA[
      #version 330 core

      in vec3 pos;
      in vec2 uv;
      uniform vec2 texRepeat;

      out jit_PerVertex {
        vec2 texcoord;
        vec2 norm;
        } jit_out;

      uniform mat4 mVPM;
      uniform mat4 texMat0;


      void main(void){

        gl_Position = mVPM*vec4(pos, 1.);
        jit_out.texcoord = vec2(texMat0 * vec4(uv, 0., 1.)) * texRepeat;
        jit_out.norm = uv;
      }

    ]]>

    </program>

    <program name="fp" type="fragment" >
    <![CDATA[
      #version 330 core

      in jit_PerVertex {
        vec2 texcoord;
        vec2 norm;
        } jit_in;

      layout (location = 0) out vec4 outColor;

      uniform sampler2DRect tex0;
      uniform float zoom;

      void main(void){
        vec2 coords = jit_in.texcoord;
        coords /= zoom;
        // coords -= (1/2 - zoom/2);
        outColor = texture(tex0, coords);

      }

    ]]>

    </program>

  </language>

</jittershader>
