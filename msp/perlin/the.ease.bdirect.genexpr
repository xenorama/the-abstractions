// Modeled after the piecewise quadratic
// y = (1/2)((2x)^2)             ; [0, 0.5)
// y = -(1/2)((2x-1)*(2x-3) - 1) ; [0.5, 1]
interpQuadraticEaseInOut(value)
{
	if (value < 0.5) {
		return 2 * value * value;
	} else {
		return (-2 * value * value) + (4 * value) - 1;
	}
}

// Modeled after the piecewise cubic
// y = (1/2)((2x)^3)       ; [0, 0.5)
// y = (1/2)((2x-2)^3 + 2) ; [0.5, 1]
interpCubicEaseInOut(value)
{
	if (value < 0.5) {
		return 4 * value * value * value;
	} else {
		tempValue = ((2 * value) - 2);
		return 0.5 * tempValue * tempValue * tempValue + 1;
	}
}

// Modeled after the piecewise quartic
// y = (1/2)((2x)^4)        ; [0, 0.5)
// y = -(1/2)((2x-2)^4 - 2) ; [0.5, 1]
interpQuarticEaseInOut(value)
{
	if (value < 0.5) {
		return 8 * value * value * value * value;
	} else {
		tempValue = (value - 1);
		return -8 * tempValue * tempValue * tempValue * tempValue + 1;
	}
}

// Modeled after the piecewise quintic
// y = (1/2)((2x)^5)       ; [0, 0.5)
// y = (1/2)((2x-2)^5 + 2) ; [0.5, 1]
interpQuinticEaseInOut(value)
{
	if (value < 0.5) {
		return 16 * value * value * value * value * value;
	} else {
		tempValue = ((2 * value) - 2);
		return  0.5 * tempValue * tempValue * tempValue * tempValue * tempValue + 1;
	}
}

// Modeled after half sine wave
interpSineEaseInOut(value)
{
	return 0.5 * (1 - cos(value * PI));
}

// Modeled after the piecewise circular function
// y = (1/2)(1 - sqrt(1 - 4x^2))           ; [0, 0.5)
// y = (1/2)(sqrt(-(2x - 3)*(2x - 1)) + 1) ; [0.5, 1]
interpCircularEaseInOut(value)
{
	if (value < 0.5) {
		return 0.5 * (1 - sqrt(1 - 4 * (value * value)));
	} else {
		return 0.5 * (sqrt(-((2 * value) - 3) * ((2 * value) - 1)) + 1);
	}
}

// Modeled after the piecewise exponential
// y = (1/2)2^(10(2x - 1))         ; [0,0.5)
// y = -(1/2)*2^(-10(2x - 1))) + 1 ; [0.5,1]
interpExponentialEaseInOut(value)
{
	if (value == 0.0 || value == 1.0) return value;

	if (value < 0.5) {
		return 0.5 * pow(2, (20 * value) - 10);
	} else {
		return -0.5 * pow(2, (-20 * value) + 10) + 1;
	}
}

// Modeled after the piecewise exponentially-damped sine wave:
// y = (1/2)*sin(13pi/2*(2*x))*pow(2, 10 * ((2*x) - 1))      ; [0,0.5)
// y = (1/2)*(sin(-13pi/2*((2x-1)+1))*pow(2,-10(2*x-1)) + 2) ; [0.5, 1]
interpElasticEaseInOut(value)
{
	if (value < 0.5) {
		return 0.5 * sin(13 * HALFPI * (2 * value)) * pow(2, 10 * ((2 * value) - 1));
	} else {
		return 0.5 * (sin(-13 * HALFPI * ((2 * value - 1) + 1)) * pow(2, -10 * (2 * value - 1)) + 2);
	}
}

// Modeled after the piecewise overshooting cubic function:
// y = (1/2)*((2x)^3-(2x)*sin(2*x*pi))           ; [0, 0.5)
// y = (1/2)*(1-((1-x)^3-(1-x)*sin((1-x)*pi))+1) ; [0.5, 1]
interpBackEaseInOut(value)
{
	if (value < 0.5) {
		tempValue = 2 * value;
		return 0.5 * (tempValue * tempValue * tempValue - tempValue * sin(tempValue * PI));
	} else {
		tempValue = (1 - (2*value - 1));
		return 0.5 * (1 - (tempValue * tempValue * tempValue - tempValue * sin(tempValue * PI))) + 0.5;
	}
}

interpBounceEaseIn(value)
{
	return 1 - interpBounceEaseOut(1 - value);
}

interpBounceEaseOut(value)
{
	if (value < 4/11.0) {
		return (121 * value * value)/16.0;
	} else if (value < 8/11.0) {
		return (363/40.0 * value * value) - (99/10.0 * value) + 17/5.0;
	} else if (value < 9/10.0) {
		return (4356/361.0 * value * value) - (35442/1805.0 * value) + 16061/1805.0;
	} else {
		return (54/5.0 * value * value) - (513/25.0 * value) + 268/25.0;
	}
}

interpBounceEaseInOut(value)
{
	if (value < 0.5) {
		return 0.5 * interpBounceEaseIn(value*2);
	} else {
		return 0.5 * interpBounceEaseOut(value * 2 - 1) + 0.5;
	}
}
